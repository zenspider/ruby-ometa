
ometa RubyOMetaTranslator {
  trans = Klass[ @name:name  @args:args	] 	  -> {"#{name}.new(#{args})"}
| [:t apply(t):ans]             -> { ans },
  App  'super' arg+:args      =   -> { "_superApplyWithArgs(#{args*", "})" },
  App  :rule   arg+:args      =   -> { "_applyWithArgs(#{rule.inspect}, #{args*", "})" },
  App  :rule                       =   -> { "_apply(#{rule.inspect})" },	
	arg = [  ag*:m ] -> m*""
				| :s &{s.is_a? String} -> s
	,
	ag= char
	 | [ transFn:t ] -> t
,
  Act  :expr                       =   -> { expr },
  Pred :expr                       =   -> { "_pred(#{expr})" },
  Or   transFn*:xs                 =   -> { "_or(#{xs * ', '})" },
  And  notLast("trans")*:xs trans:y= -> { "(#{(xs + [y]) * ';'})" },
  And                              =   -> { "proc {}" },
  Many  trans:x                    =   -> { "_xmany { #{x} }" },
	Many1 trans:x                    =   -> { "_xmany1 { #{x} }" },
  Set   :n trans:v                 =   -> { "#{n} = #{v}" },
  Append :n trans:v								 = 	 -> { "_append(#{n} , #{v})" },
	Not   trans:x                    =   -> { "_xnot { #{x} }" },
  Lookahead trans:x                =   -> { "_xlookahead { #{x} }" },
  Form  trans:x                    =   -> { "_xform { #{x} }" },
  Key		:name transFn:x							 =   -> {	"_key(#{name.inspect},#{x})"	},
	Rule  :name locals:ls arrays:ars trans:body =   -> { "def #{name}\n#{ls}\n#{ars}\n#{body}\nend\n" },
  Grammar :name :sName
          trans*:rules             =   -> { "Class.new(#{sName}) do\n@name = #{name.inspect}\n#{rules * "\n"}end" },
  locals  = [anything+:vs]            -> { vs.map { |v| "#{v} = " }.join('') + 'nil' }
          | []                        -> { '' },
  arrays  = [anything+:vs]            -> { vs.map { |v| "#{v} = " }.join('') + '[]' }
          | []                        -> { '' },
  transFn = trans:x                   -> { "proc { #{x} }" }
}

