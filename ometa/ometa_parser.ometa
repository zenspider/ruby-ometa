
ometa OMetaParser <: OMeta {
  nameFirst      = <_$.^> | letter

  nameRest       = nameFirst | digit

  className      = upper:xs[] nameRest*:xs[]                   -> leterize(xs.join(''))

  tsName         = nameFirst:xs[] nameRest*:xs[]             ->  leterize(xs.join('')) 

  name           = spaces tsName

  eChar          = '\\' char:c                                         ->  unescapeChar c 
                 | char

  tsString       = '\'' (~'\'' eChar)*:xs '\''                         ->  xs.join('') 

  characters     = tsString:s          ->  ['App', 'seq',     s.inspect] 

  sCharacters    = '"'     (~'"'         eChar)*:xs '"'                ->  ['App', 'token',   xs.join('').inspect] 

  string         = ('#' tsName):xs                  ->  ['App', 'exactly', xs.inspect] 

  number         = ('-' | empty -> { '' }):sign digit+:ds              ->  ['App', 'exactly', sign + ds.join('')] 

  keyword :xs    = token(xs) ~letterOrDigit                          ->  xs 

  hostExpr       = BSRubyParser::expr:r                    BSRubyTranslator::trans(r)

  atomicHostExpr = BSRubyParser::semAction:r               BSRubyTranslator::trans(r)

  inlineHostExpr = BSRubyParser::semAction2:r              BSRubyTranslator::trans(r)

  args           = ~space hostExpr:xs              ->  xs 
                 | empty                                               ->  "" 

  application    =   name:klas "::" name:rule args:as                    ->  ['App', 'foreign',klas,rule.inspect, *as] 
                  |  name:rule args:as                                  ->  ['App', rule, *as] 

  expr           = listOf("expr4", `"|"`):xs                         ->  (xs.size==1 ? xs[0] : ['Or',        *xs] )

  expr4          = expr3*:xs                                           -> (xs.size==1 ? xs[0] : ['And',       *xs] )

  optIter :x     = "*"                                                 ->  ['Many',        x]
                 | "+"                                                 ->  ['Many1',       x] 
                 | "?" ~inlineHostExpr                                 ->  ['Or', x,['App','empty']] 
                 | empty                                               ->  x 

  binding :x     = ':' name:n  ( '[' ']'  ->  @arrays << n; ['Append', n, x] 
                               | empty    ->  @locals << n; ['Set', n, x]
                               )
                    | ':' inlineHostExpr:e -> @locals << "it";  ['And',['Set','it',x],['Pred',e]]

  expr3          = expr2:x optIter(x):x (binding(x) |empty ->{x}) 
                   | spaces ->{ x=['App','anything']}  binding(x)

  expr2          = "~" expr2:x                                         ->  ['Not',         x] 
                 | "&" ~inlineHostExpr expr1:x                         ->  ['Lookahead',   x] 
                 | expr1

  expr1          =spaces className:c '[' expr:x "]"                            ->  ['Form',['And', ['App',"clas",c.inspect]  ,x]]
								 |application
                 | "@" name:var ("=>" application  | empty -> {['App',"anything"]}):x  ->  ['Key',  var,   x]
                 | "->" atomicHostExpr:x                       ->  ['Act',         x]
                 | "&"  inlineHostExpr:x                       ->  ['Pred',        x]
                 | spaces (characters | sCharacters | string | number)
                 | "[" expr:x "]"                                      ->  ['Form', x]
                 | "%" (className | empty ->{"Array"}):c '[' klasargs:args "]" %Klass[c,args]
                 | "<" (~">" eChar)+:x  ">"                            ->  ['App', 'regch', x.join('').inspect] 
                 | "(" expr:x ")"                                      ->  x 

	klasargs = <^\\]>*:a -> a*""

  ruleName       = name
                 | spaces tsString

  rule           = &(ruleName:n) -> @locals = []; @arrays = []
                     rulePart(n):x ("," rulePart(n))*:xs           ->  ['Rule', n, @locals.uniq,@arrays.uniq, ['Or', x, *xs]] 

  rulePart :rn   = ruleName:n &{n == rn} expr4:b1 ( "=" expr:b2        ->  ['And', b1, b2] 
                                                  | empty              ->  b1 
                                                  )

  grammar        = keyword("ometa") name:n
                   ( "<:" name | empty -> { 'OMeta' }):sn
                   "{" listOf("rule", `","`):rs "}"                  ->  ['Grammar', n, sn, *rs]
}
